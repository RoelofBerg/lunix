Install Ubuntu 16.04 LTS 64 Bit on the PC of the trainer and the scolars.
Tested on: 8 GB Ram and 100 GB SDD.

Begin on the PC of the trainer:

= Prepare System ==================================
=============================================

Remove libre office and Amazon from the launcher and add the console app

sudo apt-get update
# General tools
sudo apt-get install git git-gui putty nano scite
# For Yocto
sudo apt-get install texinfo chrpath gawk
# For custom Linux Kernel Build
sudo apt-get install gawk wget git diffstat unzip texinfo gcc-multilib \
     build-essential chrpath socat libsdl1.2-dev xterm picocom ncurses-dev lzop \
     gcc-arm-linux-gnueabihf
# OI: Ignore error about gcc-arm-linux-gnueabihf ?
# Configuration     
git config --global user.email "lunix@draeger.com"
git config --global user.name "Lunix Luna"
mkdir  ~/tmp
mkdir  ~/dev

= Prepare SD Card Images ============================
============================================
Download the image of the default UDOO NEO sd card (to have a fixed and verified version).
mkdir ~/dev/udoo-official-sdcard
cd ~/dev/udoo-official-sdcard
wget 

= Prepare Bitbake ==================================
=============================================
cd ~/dev
git clone https://github.com/openembedded/bitbake

= Prepare Examples ================================
============================================
cd ~/dev
git clone https://github.com/RoelofBerg/lunix.git

= Prepare Linux Kernel Sources ========================
============================================
cd ~/dev
git clone https://github.com/UDOOboard/linux_kernel
cd ~/tmp
git clone https://github.com/UDOOboard/linux_kernel
cd ~/tmp/linux_kernel

Test the kernel:
ARCH=arm make udoo_neo_defconfig
ARCH=arm make menuconfig
ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make zImage -j8
ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make dtbs -j8
ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make modules -j8
BOOT_PARTITION=/path/to/boot-partition
ROOT_PARTITION=/path/to/root-partition
cp arch/arm/boot/zImage $BOOT_PARTITION
cp arch/arm/boot/dts/*.dtb $BOOT_PARTITION/dts
ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make firmware_install modules_install INSTALL_MOD_PATH=$ROOT_PARTITION
(Now boot and test ...)

= Prepare Yocto ==================================
From: https://github.com/graugans/meta-udoo/wiki/Getting-started
============================================

mkdir ~/bin
curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
chmod a+x ~/bin/repo
PATH=${PATH}:~/bin
mkdir ~/tmp/udoo-community-bsp
cd ~/tmp/udoo-community-bsp
repo init -u https://github.com/graugans/fsl-community-bsp-platform -b morty
repo sync
MACHINE=udooneo DISTRO=fslc-framebuffer source ./setup-environment build
MACHINE=udooneo bitbake udoo-image-full-cmdline

Wait about two hours for completion and check the output for success.

mkdir ~/dev/udoo-community-bsp
cd ~/dev/udoo-community-bsp
repo init -u https://github.com/graugans/fsl-community-bsp-platform -b morty
repo sync
cp -R ~/tmp/udoo-community-bsp/downloads ~/dev/udoo-community-bsp

= Prepare Toaster ==================================
From: http://www.yoctoproject.org/docs/2.2/toaster-manual/toaster-manual.html
=============================================

#AI: ............. T O D O ....................

= Prepare PCs ====================================
=============================================
For every PC set up a UDOO NEO target hardwre with SD-Card UART-USB-Connector
and micro USB-Cable (for power and connectivity), plus example hardware (buzzer).
Pre-Flash the SD-Card with the official UDOO NEO image downloaded above.

Finally all content of ~/dev can be transferred to the training PCs. Purpose: Pre-Downloaded prerequisites for speed and reliability (when old versions vanish or servers are down during the lesson).
Size: About 5 GB
Also all steps of 'Prepare System' above have to be executed again on the training PC
To save time all builds can be run one by executing (on the training PC !):

#Linux Kernel:
cd ~/dev/linux_kernel
ARCH=arm make udoo_neo_defconfig
ARCH=arm make menuconfig
(save and exit)
ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make zImage -j8
ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make dtbs -j8
ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- make modules -j8

#Yocto:
cd ~/dev/udoo-community-bsp
MACHINE=udooneo DISTRO=fslc-framebuffer source ./setup-environment build
MACHINE=udooneo bitbake udoo-image-full-cmdline
(Wait at about 2 hours and check the output for success)

Then to enforce building, deleting the following files enforces compilation again:
